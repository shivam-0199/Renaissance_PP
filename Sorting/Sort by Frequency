QQ
Given an integer array nums, sort the array according to frequency of elements. That is elements that have higher frequency come first. If frequencies of two elements are same, 
then smaller number comes first.

Input Format

The first line of input contains an integer T denoting the number of test cases.
The first line of each test case contains a single integer N denoting the size of array.
The second line contains N space-separated integers denoting the elements of the array.
Output Format

For each testcase, in a new line, print each sorted array in a seperate line. For each array its numbers should be seperated by space.
Input 1:

2
5
5 5 4 6 4
5
9 9 9 2 5
Output 1:

4 4 5 5 6
9 9 9 2 5
Explanation:

Testcase1: The highest frequency here is 2. Both 5 and 4 have that frequency. Now since the frequencies are same then smaller element comes first. So 4 4 comes first then comes 5 5.
Finally comes 6.
The output is 4 4 5 5 6.

Testcase2: The highest frequency here is 3. The element 9 has the highest frequency. So 9 9 9 comes first. Now both 2 and 5 have same frequency. So we print smaller element first.
The output is 9 9 9 2 5.
Constraints:

Constraints:

1
≤
T
≤
70
1
≤
N
≤
130
1
≤
n
u
m
s
[
i
]
≤
60


Example
Input
2  
5  
5 5 4 6 4  
5  
9 9 9 2 5
Output
4 4 5 5 6  
9 9 9 2 5


// Online C++ compiler to run C++ program online
#include <iostream>
#include<algorithm>
#include<vector>
using namespace std;
struct triplet{
    int val;
    int freq;
    int index;
};

bool cmp(triplet t1, triplet t2){
   if(t1.freq!=t2.freq){
        return t1.freq>t2.freq;
    }
   else if(t1.val!=t2.val){
        return t1.val<t2.val;
    }
    else{
         return t1.index<t2.index;
    }
}

int main() {
    int test;
    cin>>test;
    while(test--) {
        int n;
        cin>>n;
        int arr[n];
        for(int i=0;i<n;i++) {
            cin>>arr[i];
 }

        int count[61];
         for(int i=0;i<61;i++){

            count[i]=0;

        }
        for(int i=0;i<n;i++){

            count[arr[i]]++;

        }
        vector<triplet>v;

        for(int i=0;i<n;i++){

            triplet t;

            t.val=arr[i];

            t.freq=count[arr[i]];

            t.index=i;

            v.push_back(t);

        }

        sort(v.begin(),v.end(),cmp);
        
        for(int i=0;i<v.size();i++){
            cout<<v[i].val<<" ";
        }
        cout<<endl;

    }
    return 0;



CODE BY PP

#include <iostream>
 
#include <vector>
 
#include <bits/stdc++.h>
 
using namespace std;
 
struct Triplet{
 
    int val;
 
    int f;
 
    int idx;
 
};
 
 
 
bool CMP(Triplet T1, Triplet T2)
 
{
 
    if(T1.f!=T2.f)
 
    {
 
        if(T1.f>T2.f)
 
         return true;
 
        else 
 
          return false;
 
    }
 
    if(T1.val!=T2.val)
 
    {
 
        if(T1.val<T2.val)
 
         return true;
 
        else
 
         return false;
 
    }
 
    return true;
 
}
 
int main() {
 
    int T;
 
    cin>>T;
 
    while(T--)
 
    {  
 
        int N;
 
        cin>>N;
 
        int arr[N];
        set<int>se;
 
        for(int i=0;i<N;i++)
 
        {
 
            cin>>arr[i];
            se.insert(arr[i]);
 
        }
 
        int freq[61];
 
        for(int i=0;i<61;i++)
 
        {
 
            freq[i]=0; //Initialise everything to zero
 
        }
 
        for(int i=0;i<N;i++)
 
        {
 
            freq[arr[i]]++;
 
        }
 
        vector<Triplet> v;
 
        for(int val:se)
 
        {
 
            Triplet t;
 
            t.val=val;
 
            t.f=freq[val];
 
            t.idx=0;
            // cout<<t.val<<" "<<t.f<<endl;
 
 
 
            v.push_back(t);
 
        }
 
        sort(v.begin(),v.end(),CMP);
 
        for(int i=0;i<v.size();i++)
 
        {
 
            for(int j=0;j<v[i].f;j++)
 
              cout<<v[i].val<<" ";
 
        }
 
        cout<<endl;
 
    }
 
    return 0;
 
}
 
 

} 
