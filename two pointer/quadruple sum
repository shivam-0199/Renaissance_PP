https://leetcode.com/problems/4sum/


class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n=nums.size();
        sort(nums.begin(),nums.end());
        vector<vector<int>>ans;

        for(int a=0;a<n;a++){
            if(a>0 && nums[a]==nums[a-1]){
                continue;
            }
            for(int b=a+1;b<n;b++){
                if(b>a+1 && nums[b]==nums[b-1]){
                    continue;
                }

                int c=b+1;
                int d=n-1;
                while(c<d){
                    vector<int>temp;
                    long long remsum= target-1*(nums[a]*1L+nums[b]*1L);
                    long long cursum= (nums[c]*1L+nums[d]*1L);

                    if(cursum>remsum){
                        d--;
                    }
                    else if(cursum<remsum){
                        c++;
                    }
                    else{
                        //cout<<1;
                        temp.push_back(nums[a]);
                        temp.push_back(nums[b]);
                        temp.push_back(nums[c]);
                        temp.push_back(nums[d]);
                        ans.push_back(temp);

                        if(nums[c]==nums[d]){
                            break;
                        }

                        else{
                            int val1=nums[c];
                            int val2=nums[d];
                            while(val1==nums[c]){
                                c++;
                            }
                            while(val2==nums[d]){
                                d--;
                            }
                        }
                    }

                }

            }
           
        }
         return ans;
    }
};
